// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	SessionTokenScopes = "sessionToken.Scopes"
)

// BgmPeriodsV5 A map to each supported BGM summary period
type BgmPeriodsV5 map[string]GlucosePeriodV5

// CgmPeriodsV5 A map to each supported CGM summary period
type CgmPeriodsV5 map[string]GlucosePeriodV5

// ContinuousPeriodV5 defines model for continuousPeriod.v5.
type ContinuousPeriodV5 struct {
	// AverageDailyRecords Average daily readings
	AverageDailyRecords *float64 `json:"averageDailyRecords,omitempty"`

	// Deferred Metrics for a particular range of glucose values
	Deferred GlucoseRangeV5 `json:"deferred,omitempty"`

	// Realtime Metrics for a particular range of glucose values
	Realtime GlucoseRangeV5 `json:"realtime,omitempty"`

	// Total Metrics for a particular range of glucose values
	Total GlucoseRangeV5 `json:"total,omitempty"`
}

// ContinuousPeriodsV5 A map to each supported Continuous summary period
type ContinuousPeriodsV5 map[string]ContinuousPeriodV5

// ContinuousRangesV5 continuous ranges
type ContinuousRangesV5 struct {
	// Deferred Metrics for a particular range of glucose values
	Deferred GlucoseRangeV5 `json:"deferred,omitempty"`

	// Realtime Metrics for a particular range of glucose values
	Realtime GlucoseRangeV5 `json:"realtime,omitempty"`

	// Total Metrics for a particular range of glucose values
	Total GlucoseRangeV5 `json:"total,omitempty"`
}

// GlucoseMinMaxV5 minimum and maximum glucose values
type GlucoseMinMaxV5 struct {
	Max      float64 `json:"max"`
	MaxDelta float64 `json:"maxDelta"`
	Min      float64 `json:"min"`
	MinDelta float64 `json:"minDelta"`
}

// GlucosePeriodV5 defines model for glucosePeriod.v5.
type GlucosePeriodV5 struct {
	// AverageDailyRecords Average daily readings
	AverageDailyRecords float64 `json:"averageDailyRecords"`

	// AverageGlucoseMmol Average Glucose of records in this period
	AverageGlucoseMmol     float64 `json:"averageGlucoseMmol"`
	CoefficientOfVariation float64 `json:"coefficientOfVariation"`
	DaysWithData           int     `json:"daysWithData"`

	// Delta Summary of a specific CGM time period (currently: 1d, 7d, 14d, 30d)
	Delta *GlucosePeriodDeltaV5 `json:"delta,omitempty"`

	// GlucoseManagementIndicator A derived value which emulates A1C
	GlucoseManagementIndicator float64 `json:"glucoseManagementIndicator"`
	HoursWithData              int     `json:"hoursWithData"`

	// InAnyHigh Metrics for a particular range of glucose values
	InAnyHigh GlucoseRangeV5 `json:"inAnyHigh,omitempty"`

	// InAnyLow Metrics for a particular range of glucose values
	InAnyLow GlucoseRangeV5 `json:"inAnyLow,omitempty"`

	// InExtremeHigh Metrics for a particular range of glucose values
	InExtremeHigh GlucoseRangeV5 `json:"inExtremeHigh,omitempty"`

	// InHigh Metrics for a particular range of glucose values
	InHigh GlucoseRangeV5 `json:"inHigh,omitempty"`

	// InLow Metrics for a particular range of glucose values
	InLow GlucoseRangeV5 `json:"inLow,omitempty"`

	// InTarget Metrics for a particular range of glucose values
	InTarget GlucoseRangeV5 `json:"inTarget,omitempty"`

	// InVeryHigh Metrics for a particular range of glucose values
	InVeryHigh GlucoseRangeV5 `json:"inVeryHigh,omitempty"`

	// InVeryLow Metrics for a particular range of glucose values
	InVeryLow         GlucoseRangeV5 `json:"inVeryLow,omitempty"`
	Max               float64        `json:"max"`
	MaxDelta          float64        `json:"maxDelta"`
	Min               float64        `json:"min"`
	MinDelta          float64        `json:"minDelta"`
	StandardDeviation float64        `json:"standardDeviation"`

	// Total Metrics for a particular range of glucose values
	Total GlucoseRangeV5 `json:"total,omitempty"`
}

// GlucosePeriodDeltaV5 defines model for glucosePeriodDelta.v5.
type GlucosePeriodDeltaV5 struct {
	// AverageDailyRecords Average daily readings
	AverageDailyRecords float64 `json:"averageDailyRecords"`

	// AverageGlucoseMmol Average Glucose of records in this period
	AverageGlucoseMmol     float64 `json:"averageGlucoseMmol"`
	CoefficientOfVariation float64 `json:"coefficientOfVariation"`
	DaysWithData           int     `json:"daysWithData"`

	// GlucoseManagementIndicator A derived value which emulates A1C
	GlucoseManagementIndicator float64 `json:"glucoseManagementIndicator"`
	HoursWithData              int     `json:"hoursWithData"`

	// InAnyHigh Metrics for a particular range of glucose values
	InAnyHigh GlucoseRangeV5 `json:"inAnyHigh,omitempty"`

	// InAnyLow Metrics for a particular range of glucose values
	InAnyLow GlucoseRangeV5 `json:"inAnyLow,omitempty"`

	// InExtremeHigh Metrics for a particular range of glucose values
	InExtremeHigh GlucoseRangeV5 `json:"inExtremeHigh,omitempty"`

	// InHigh Metrics for a particular range of glucose values
	InHigh GlucoseRangeV5 `json:"inHigh,omitempty"`

	// InLow Metrics for a particular range of glucose values
	InLow GlucoseRangeV5 `json:"inLow,omitempty"`

	// InTarget Metrics for a particular range of glucose values
	InTarget GlucoseRangeV5 `json:"inTarget,omitempty"`

	// InVeryHigh Metrics for a particular range of glucose values
	InVeryHigh GlucoseRangeV5 `json:"inVeryHigh,omitempty"`

	// InVeryLow Metrics for a particular range of glucose values
	InVeryLow         GlucoseRangeV5 `json:"inVeryLow,omitempty"`
	Max               float64        `json:"max"`
	MaxDelta          float64        `json:"maxDelta"`
	Min               float64        `json:"min"`
	MinDelta          float64        `json:"minDelta"`
	StandardDeviation float64        `json:"standardDeviation"`

	// Total Metrics for a particular range of glucose values
	Total GlucoseRangeV5 `json:"total,omitempty"`
}

// GlucoseRangeV5 Metrics for a particular range of glucose values
type GlucoseRangeV5 struct {
	// Glucose total of glucose values
	Glucose float64 `json:"glucose"`

	// Minutes total of minutes represented
	Minutes int `json:"minutes"`

	// Percent percent of all ranges this range represents, or total CGM use in a Total range
	Percent float64 `json:"percent"`

	// Records total records
	Records int `json:"records"`

	// Variance total variance of the values in this range
	Variance float64 `json:"variance"`
}

// GlucoseRangesV5 glucose ranges
type GlucoseRangesV5 struct {
	// InAnyHigh Metrics for a particular range of glucose values
	InAnyHigh GlucoseRangeV5 `json:"inAnyHigh,omitempty"`

	// InAnyLow Metrics for a particular range of glucose values
	InAnyLow GlucoseRangeV5 `json:"inAnyLow,omitempty"`

	// InExtremeHigh Metrics for a particular range of glucose values
	InExtremeHigh GlucoseRangeV5 `json:"inExtremeHigh,omitempty"`

	// InHigh Metrics for a particular range of glucose values
	InHigh GlucoseRangeV5 `json:"inHigh,omitempty"`

	// InLow Metrics for a particular range of glucose values
	InLow GlucoseRangeV5 `json:"inLow,omitempty"`

	// InTarget Metrics for a particular range of glucose values
	InTarget GlucoseRangeV5 `json:"inTarget,omitempty"`

	// InVeryHigh Metrics for a particular range of glucose values
	InVeryHigh GlucoseRangeV5 `json:"inVeryHigh,omitempty"`

	// InVeryLow Metrics for a particular range of glucose values
	InVeryLow GlucoseRangeV5 `json:"inVeryLow,omitempty"`

	// Total Metrics for a particular range of glucose values
	Total GlucoseRangeV5 `json:"total,omitempty"`
}

// SummaryV5 defines model for summary.v5.
type SummaryV5 struct {
	// Config Summary schema version and calculation configuration
	Config SummaryConfigV1 `json:"config,omitempty"`

	// Dates dates tracked for summary calculation
	Dates SummaryDatesV5 `json:"dates,omitempty"`

	// Id Summary Unique Identifier
	Id      *SummaryIdV1       `json:"id,omitempty"`
	Periods *SummaryV5_Periods `json:"periods,omitempty"`

	// Type Field which contains a summary type string.
	Type SummaryTypeV5 `json:"type,omitempty"`

	// UserId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	UserId *Tidepooluserid `json:"userId,omitempty"`
}

// SummaryV5_Periods defines model for SummaryV5.Periods.
type SummaryV5_Periods struct {
	union json.RawMessage
}

// SummaryBaseV5 shared properties of all summaries
type SummaryBaseV5 struct {
	// Config Summary schema version and calculation configuration
	Config SummaryConfigV1 `json:"config,omitempty"`

	// Dates dates tracked for summary calculation
	Dates SummaryDatesV5 `json:"dates,omitempty"`

	// Id Summary Unique Identifier
	Id *SummaryIdV1 `json:"id,omitempty"`

	// Type Field which contains a summary type string.
	Type SummaryTypeV5 `json:"type,omitempty"`

	// UserId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	UserId *Tidepooluserid `json:"userId,omitempty"`
}

// SummaryConfigV1 Summary schema version and calculation configuration
type SummaryConfigV1 struct {
	// HighGlucoseThreshold Threshold used for determining if a value is high
	HighGlucoseThreshold float64 `json:"highGlucoseThreshold"`

	// LowGlucoseThreshold Threshold used for determining if a value is low
	LowGlucoseThreshold float64 `json:"lowGlucoseThreshold"`

	// SchemaVersion Summary schema version
	SchemaVersion int `json:"schemaVersion"`

	// VeryHighGlucoseThreshold Threshold used for determining if a value is very high
	VeryHighGlucoseThreshold float64 `json:"veryHighGlucoseThreshold"`

	// VeryLowGlucoseThreshold Threshold used for determining if a value is very low
	VeryLowGlucoseThreshold float64 `json:"veryLowGlucoseThreshold"`
}

// SummaryDatesV5 dates tracked for summary calculation
type SummaryDatesV5 struct {
	// FirstData Date of the first included value
	FirstData time.Time `json:"firstData"`

	// LastData Date of the last calculated value
	LastData time.Time `json:"lastData"`

	// LastUpdatedDate Date of the last calculation
	LastUpdatedDate time.Time `json:"lastUpdatedDate"`

	// LastUpdatedReason List of reasons the summary was updated for
	LastUpdatedReason []string `json:"lastUpdatedReason"`

	// LastUploadDate Created date of the last calculated value
	LastUploadDate time.Time `json:"lastUploadDate"`

	// OutdatedReason List of reasons the summary was marked outdated for
	OutdatedReason []string `json:"outdatedReason"`

	// OutdatedSince Date of the first user upload after lastData, removed when calculated
	OutdatedSince *time.Time `json:"outdatedSince,omitempty"`
}

// SummaryIdV1 Summary Unique Identifier
type SummaryIdV1 = string

// SummaryTypeV5 Field which contains a summary type string.
type SummaryTypeV5 = string

// Tidepooluserid String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type Tidepooluserid = string

// UserId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type UserId = Tidepooluserid

// AsCgmPeriodsV5 returns the union data inside the SummaryV5_Periods as a CgmPeriodsV5
func (t SummaryV5_Periods) AsCgmPeriodsV5() (CgmPeriodsV5, error) {
	var body CgmPeriodsV5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCgmPeriodsV5 overwrites any union data inside the SummaryV5_Periods as the provided CgmPeriodsV5
func (t *SummaryV5_Periods) FromCgmPeriodsV5(v CgmPeriodsV5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCgmPeriodsV5 performs a merge with any union data inside the SummaryV5_Periods, using the provided CgmPeriodsV5
func (t *SummaryV5_Periods) MergeCgmPeriodsV5(v CgmPeriodsV5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBgmPeriodsV5 returns the union data inside the SummaryV5_Periods as a BgmPeriodsV5
func (t SummaryV5_Periods) AsBgmPeriodsV5() (BgmPeriodsV5, error) {
	var body BgmPeriodsV5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBgmPeriodsV5 overwrites any union data inside the SummaryV5_Periods as the provided BgmPeriodsV5
func (t *SummaryV5_Periods) FromBgmPeriodsV5(v BgmPeriodsV5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBgmPeriodsV5 performs a merge with any union data inside the SummaryV5_Periods, using the provided BgmPeriodsV5
func (t *SummaryV5_Periods) MergeBgmPeriodsV5(v BgmPeriodsV5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsContinuousPeriodsV5 returns the union data inside the SummaryV5_Periods as a ContinuousPeriodsV5
func (t SummaryV5_Periods) AsContinuousPeriodsV5() (ContinuousPeriodsV5, error) {
	var body ContinuousPeriodsV5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromContinuousPeriodsV5 overwrites any union data inside the SummaryV5_Periods as the provided ContinuousPeriodsV5
func (t *SummaryV5_Periods) FromContinuousPeriodsV5(v ContinuousPeriodsV5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeContinuousPeriodsV5 performs a merge with any union data inside the SummaryV5_Periods, using the provided ContinuousPeriodsV5
func (t *SummaryV5_Periods) MergeContinuousPeriodsV5(v ContinuousPeriodsV5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SummaryV5_Periods) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SummaryV5_Periods) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
